name: Backend CD (Optimized)

on:
  push:
    branches:
      - dev
      - be/feature/CD-update

permissions:
  id-token: write
  contents: read

jobs:
  # 변경된 서비스를 결정하는 Job
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # 모든 브랜치와 태그의 전체 히스토리를 가져옴
          fetch-depth: 0

      - name: Find changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          # 'dev' 브랜치의 마지막 성공적인 커밋 이후의 변경 사항을 가져옴
          since_last_remote_commit: 'true'

      - name: List all changed files
        run: |
          echo "Changed files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"

      - name: Determine which services to build based on changes
        id: filter
        run: |
          changed_services=()

          # dependencies.json 파일을 통해서 각 모듈의 의존성을 조회함.
          services=$(jq -r 'keys | .[]' .github/dependencies.json)

          for svc in $services; do\
            dep_paths=$(jq -r --arg SVC "$svc" '.[$SVC] | .[]' .github/dependencies.json)
            
            for path in $dep_paths; do
              if grep -q "backend/$path" <<< "${{ steps.changed-files.outputs.all_changed_files }}"; then
                if [[ ! " ${changed_services[@]} " =~ " ${svc} " ]]; then
                  changed_services+=("$svc")
                fi
                break
              fi
            done
          done

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do

            for svc in "${!deps[@]}"; do
              IFS=',' read -ra dep_paths <<< "${deps[$svc]}"

              for path in "${dep_paths[@]}"; do
                if [[ "$file" == "backend/$path"* ]]; then
                  if [[ ! " ${changed_services[@]} " =~ " ${svc} " ]]; then
                    changed_services+=("$svc")
                  fi
                  break 
                fi
              done

            done

          done

          if [ ${#changed_services[@]} -eq 0 ]; then
            echo "No changes detected in backend services or their dependencies."
            echo "services=[]" >> $GITHUB_OUTPUT

          else
            json_array=$(printf '"%s",' "${changed_services[@]}")
            json_array="[${json_array%,}]"
            echo "Services to build: $json_array"
            echo "services=$json_array" >> $GITHUB_OUTPUT

          fi

  # 빌드 Job, 변경된 서비스가 있을 경우에만 실행
  build:
    needs: determine-changes
    if: fromJson(needs.determine-changes.outputs.services)[0] != null
    runs-on: ubuntu-latest
    strategy:
      matrix:
        svc: ${{ fromJson(needs.determine-changes.outputs.services) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x ./backend/gradlew

      - name: Build ${{ matrix.svc }} with Gradle
        working-directory: ./backend
        run: ./gradlew :application-modules:${{ matrix.svc }}:build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_BUCKET_REGION }}
          role-to-assume: ${{ secrets.OIDC_ROLE }}

      - name: Upload JAR to S3
        run: |
          JAR_FILE=$(find ./backend/application-modules/${{ matrix.svc }}/build/libs -name "*.jar" ! -name "*-plain.jar")
          aws s3 cp $JAR_FILE \
            s3://${{ secrets.AWS_BE_BUCKET_NAME }}/artifacts/${{ github.sha }}/${{ matrix.svc }}.jar \
            --storage-class STANDARD_IA

  summarize-build:
    needs: [determine-changes, build]
    runs-on: ubuntu-latest
    # build 작업이 성공적으로 완료되었을 때만 실행
    if: success()
    steps:
      - name: Print list of built modules
        run: |
          echo "✅ Successfully built modules:"
          echo "${{ needs.determine-changes.outputs.services }}"

  # 배포 Job, 빌드 Job이 성공했을 경우에만 실행
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: ${{ secrets.AWS_BUCKET_REGION }}
  #         role-to-assume: ${{ secrets.OIDC_ROLE }}

  #     - name: Create deployment package
  #       working-directory: ./backend
  #       run: |
  #         mkdir -p deploy/scripts
  #         cp -r scripts/deploy/* deploy/
  #         cp appspec.yml deploy/

  #         cat > deploy/.env <<EOF
  #         export ARTIFACT_VERSION=${GITHUB_SHA}
  #         export S3_DEPLOY_BUCKET=${{ secrets.AWS_BE_BUCKET_NAME }}
  #         export S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}

  #         export DB_HOST=${{ secrets.DB_HOST }}
  #         export DB_PORT=3306
  #         export DB_NAME=${{ secrets.DB_NAME }}
  #         export DB_USER=${{ secrets.DB_USER }}
  #         export DB_PASSWORD=${{ secrets.DB_PASSWORD }}

  #         export REDIS_HOST=${{ secrets.REDIS_HOST }}
  #         export REDIS_PORT=${{ secrets.REDIS_PORT }}
  #         export REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
  #         export REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}

  #         export JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
  #         export JWT_EXPIRATION_MS=${{ secrets.JWT_EXPIRATION_MS }}

  #         export KMA_API_KEY_MOUNTAIN=${{ secrets.KMA_API_KEY_MOUNTAIN }}
  #         export KMA_API_KEY_SHORT=${{ secrets.KMA_API_KEY_SHORT }}
  #         export KMA_API_KEY_ULTRA=${{ secrets.KMA_API_KEY_ULTRA }}
  #         EOF

  #         chmod 755 deploy/*.sh
  #         cd deploy && zip -r ../deploy.zip .

  #     - name: Upload deployment package to S3
  #       working-directory: ./backend
  #       run: |
  #         aws s3 cp deploy.zip \
  #           s3://${{ secrets.AWS_BE_BUCKET_NAME }}/deployments/backend-${GITHUB_SHA}.zip

  #     - name: Create CodeDeploy deployment
  #       run: |
  #         aws deploy create-deployment \
  #           --application-name ${{ secrets.CODEDEPLOY_APPLICATION }} \
  #           --deployment-group-name ${{ secrets.CODEDEPLOY_GROUP }} \
  #           --deployment-config-name CodeDeployDefault.AllAtOnce \
  #           --s3-location bucket=${{ secrets.AWS_BE_BUCKET_NAME }},key=deployments/backend-${GITHUB_SHA}.zip,bundleType=zip \
  #           --description "Deployment of commit ${GITHUB_SHA}" \
  #           --ignore-application-stop-failures
